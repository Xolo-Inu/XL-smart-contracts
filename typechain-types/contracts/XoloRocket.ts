/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface XoloRocketInterface extends utils.Interface {
  functions: {
    "_isExcludedMaxTransactionAmount(address)": FunctionFragment;
    "addToBlackList(address,bool)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "autoLpReceiver()": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistAccount(address,bool)": FunctionFragment;
    "buyDevFee()": FunctionFragment;
    "buyLiquidityFee()": FunctionFragment;
    "buyMarketingFee()": FunctionFragment;
    "buyTotalFees()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "devWallet()": FunctionFragment;
    "disableTransferDelay()": FunctionFragment;
    "earlySellLiquidityFee()": FunctionFragment;
    "earlySellMarketingFee()": FunctionFragment;
    "enableEarlySellTax()": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeFromMaxTransaction(address,bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "lastLpBurnTime()": FunctionFragment;
    "lastManualLpBurnTime()": FunctionFragment;
    "limitsInEffect()": FunctionFragment;
    "lpBurnEnabled()": FunctionFragment;
    "lpBurnFrequency()": FunctionFragment;
    "manualBurnFrequency()": FunctionFragment;
    "manualBurnLiquidityPairTokens(uint256)": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "maxTransactionAmount()": FunctionFragment;
    "maxWallet()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "percentForLPBurn()": FunctionFragment;
    "removeLimits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetLimitsBackIntoEffect()": FunctionFragment;
    "sellDevFee()": FunctionFragment;
    "sellLiquidityFee()": FunctionFragment;
    "sellMarketingFee()": FunctionFragment;
    "sellTotalFees()": FunctionFragment;
    "setAutoLPBurnSettings(uint256,uint256,bool)": FunctionFragment;
    "setAutoLpReceiver(address)": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setEarlySellTax(bool)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "sweepEth()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokensForDev()": FunctionFragment;
    "tokensForLiquidity()": FunctionFragment;
    "tokensForMarketing()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingActive()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferDelayEnabled()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateBuyFees(uint256,uint256,uint256)": FunctionFragment;
    "updateDevWallet(address)": FunctionFragment;
    "updateMarketingWallet(address)": FunctionFragment;
    "updateMaxTxnAmount(uint256)": FunctionFragment;
    "updateMaxWalletAmount(uint256)": FunctionFragment;
    "updateSellFees(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateSwapEnabled(bool)": FunctionFragment;
    "updateSwapTokensAtAmount(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_isExcludedMaxTransactionAmount"
      | "addToBlackList"
      | "allowance"
      | "approve"
      | "autoLpReceiver"
      | "automatedMarketMakerPairs"
      | "balanceOf"
      | "blacklistAccount"
      | "buyDevFee"
      | "buyLiquidityFee"
      | "buyMarketingFee"
      | "buyTotalFees"
      | "decimals"
      | "decreaseAllowance"
      | "devWallet"
      | "disableTransferDelay"
      | "earlySellLiquidityFee"
      | "earlySellMarketingFee"
      | "enableEarlySellTax"
      | "enableTrading"
      | "excludeFromFees"
      | "excludeFromMaxTransaction"
      | "increaseAllowance"
      | "isExcludedFromFees"
      | "lastLpBurnTime"
      | "lastManualLpBurnTime"
      | "limitsInEffect"
      | "lpBurnEnabled"
      | "lpBurnFrequency"
      | "manualBurnFrequency"
      | "manualBurnLiquidityPairTokens"
      | "marketingWallet"
      | "maxTransactionAmount"
      | "maxWallet"
      | "name"
      | "owner"
      | "percentForLPBurn"
      | "removeLimits"
      | "renounceOwnership"
      | "resetLimitsBackIntoEffect"
      | "sellDevFee"
      | "sellLiquidityFee"
      | "sellMarketingFee"
      | "sellTotalFees"
      | "setAutoLPBurnSettings"
      | "setAutoLpReceiver"
      | "setAutomatedMarketMakerPair"
      | "setEarlySellTax"
      | "swapEnabled"
      | "swapTokensAtAmount"
      | "sweep"
      | "sweepEth"
      | "symbol"
      | "tokensForDev"
      | "tokensForLiquidity"
      | "tokensForMarketing"
      | "totalSupply"
      | "tradingActive"
      | "transfer"
      | "transferDelayEnabled"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateBuyFees"
      | "updateDevWallet"
      | "updateMarketingWallet"
      | "updateMaxTxnAmount"
      | "updateMaxWalletAmount"
      | "updateSellFees"
      | "updateSwapEnabled"
      | "updateSwapTokensAtAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlackList",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "autoLpReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "buyDevFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableTransferDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlySellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earlySellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableEarlySellTax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLpBurnTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastManualLpBurnTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpBurnEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lpBurnFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualBurnFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualBurnLiquidityPairTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentForLPBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetLimitsBackIntoEffect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoLPBurnSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoLpReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarlySellTax",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "sweepEth", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForDev",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForMarketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDevWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTxnAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapTokensAtAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "autoLpReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableTransferDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlySellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlySellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableEarlySellTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLpBurnTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastManualLpBurnTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpBurnEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpBurnFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualBurnFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualBurnLiquidityPairTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentForLPBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetLimitsBackIntoEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellDevFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoLPBurnSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoLpReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarlySellTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDevWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTxnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapTokensAtAmount",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AutoNukeLP()": EventFragment;
    "BoughtEarly(address)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "ManualNukeLP()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
    "devWalletUpdated(address,address)": EventFragment;
    "marketingWalletUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AutoNukeLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoughtEarly"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManualNukeLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "devWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "marketingWalletUpdated"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AutoNukeLPEventObject {}
export type AutoNukeLPEvent = TypedEvent<[], AutoNukeLPEventObject>;

export type AutoNukeLPEventFilter = TypedEventFilter<AutoNukeLPEvent>;

export interface BoughtEarlyEventObject {
  sniper: string;
}
export type BoughtEarlyEvent = TypedEvent<[string], BoughtEarlyEventObject>;

export type BoughtEarlyEventFilter = TypedEventFilter<BoughtEarlyEvent>;

export interface ExcludeFromFeesEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean],
  ExcludeFromFeesEventObject
>;

export type ExcludeFromFeesEventFilter = TypedEventFilter<ExcludeFromFeesEvent>;

export interface ManualNukeLPEventObject {}
export type ManualNukeLPEvent = TypedEvent<[], ManualNukeLPEventObject>;

export type ManualNukeLPEventFilter = TypedEventFilter<ManualNukeLPEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetAutomatedMarketMakerPairEventObject {
  pair: string;
  value: boolean;
}
export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean],
  SetAutomatedMarketMakerPairEventObject
>;

export type SetAutomatedMarketMakerPairEventFilter =
  TypedEventFilter<SetAutomatedMarketMakerPairEvent>;

export interface SwapAndLiquifyEventObject {
  tokensSwapped: BigNumber;
  ethReceived: BigNumber;
  tokensIntoLiquidity: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateUniswapV2RouterEventObject {
  newAddress: string;
  oldAddress: string;
}
export type UpdateUniswapV2RouterEvent = TypedEvent<
  [string, string],
  UpdateUniswapV2RouterEventObject
>;

export type UpdateUniswapV2RouterEventFilter =
  TypedEventFilter<UpdateUniswapV2RouterEvent>;

export interface devWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type devWalletUpdatedEvent = TypedEvent<
  [string, string],
  devWalletUpdatedEventObject
>;

export type devWalletUpdatedEventFilter =
  TypedEventFilter<devWalletUpdatedEvent>;

export interface marketingWalletUpdatedEventObject {
  newWallet: string;
  oldWallet: string;
}
export type marketingWalletUpdatedEvent = TypedEvent<
  [string, string],
  marketingWalletUpdatedEventObject
>;

export type marketingWalletUpdatedEventFilter =
  TypedEventFilter<marketingWalletUpdatedEvent>;

export interface XoloRocket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XoloRocketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addToBlackList(
      account: PromiseOrValue<string>,
      onOrOff: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    autoLpReceiver(overrides?: CallOverrides): Promise<[string]>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklistAccount(
      account: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyDevFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devWallet(overrides?: CallOverrides): Promise<[string]>;

    disableTransferDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    earlySellLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    earlySellMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    enableEarlySellTax(overrides?: CallOverrides): Promise<[boolean]>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastLpBurnTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastManualLpBurnTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    limitsInEffect(overrides?: CallOverrides): Promise<[boolean]>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lpBurnFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    manualBurnFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    manualBurnLiquidityPairTokens(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percentForLPBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetLimitsBackIntoEffect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellDevFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAutoLPBurnSettings(
      _frequencyInSeconds: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _Enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutoLpReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEarlySellTax(
      onoff: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweepEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensForDev(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForMarketing(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingActive(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateBuyFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDevWallet(
      newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMarketingWallet(
      newMarketingWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaxTxnAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSellFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _earlySellLiquidityFee: PromiseOrValue<BigNumberish>,
      _earlySellMarketingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSwapEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _isExcludedMaxTransactionAmount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addToBlackList(
    account: PromiseOrValue<string>,
    onOrOff: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  autoLpReceiver(overrides?: CallOverrides): Promise<string>;

  automatedMarketMakerPairs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklistAccount(
    account: PromiseOrValue<string>,
    isBlacklisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyDevFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devWallet(overrides?: CallOverrides): Promise<string>;

  disableTransferDelay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  earlySellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  earlySellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  enableEarlySellTax(overrides?: CallOverrides): Promise<boolean>;

  enableTrading(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: PromiseOrValue<string>,
    excluded: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludeFromMaxTransaction(
    updAds: PromiseOrValue<string>,
    isEx: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastLpBurnTime(overrides?: CallOverrides): Promise<BigNumber>;

  lastManualLpBurnTime(overrides?: CallOverrides): Promise<BigNumber>;

  limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

  lpBurnEnabled(overrides?: CallOverrides): Promise<boolean>;

  lpBurnFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  manualBurnFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  manualBurnLiquidityPairTokens(
    percent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  percentForLPBurn(overrides?: CallOverrides): Promise<BigNumber>;

  removeLimits(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetLimitsBackIntoEffect(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellDevFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  setAutoLPBurnSettings(
    _frequencyInSeconds: PromiseOrValue<BigNumberish>,
    _percent: PromiseOrValue<BigNumberish>,
    _Enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutoLpReceiver(
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAutomatedMarketMakerPair(
    pair: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEarlySellTax(
    onoff: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  sweep(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweepEth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensForDev(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingActive(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateBuyFees(
    _marketingFee: PromiseOrValue<BigNumberish>,
    _liquidityFee: PromiseOrValue<BigNumberish>,
    _devFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDevWallet(
    newWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMarketingWallet(
    newMarketingWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaxTxnAmount(
    newNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaxWalletAmount(
    newNum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSellFees(
    _marketingFee: PromiseOrValue<BigNumberish>,
    _liquidityFee: PromiseOrValue<BigNumberish>,
    _devFee: PromiseOrValue<BigNumberish>,
    _earlySellLiquidityFee: PromiseOrValue<BigNumberish>,
    _earlySellMarketingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSwapEnabled(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSwapTokensAtAmount(
    newAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addToBlackList(
      account: PromiseOrValue<string>,
      onOrOff: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    autoLpReceiver(overrides?: CallOverrides): Promise<string>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistAccount(
      account: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    devWallet(overrides?: CallOverrides): Promise<string>;

    disableTransferDelay(overrides?: CallOverrides): Promise<boolean>;

    earlySellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    earlySellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    enableEarlySellTax(overrides?: CallOverrides): Promise<boolean>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastLpBurnTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastManualLpBurnTime(overrides?: CallOverrides): Promise<BigNumber>;

    limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<boolean>;

    lpBurnFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    manualBurnFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    manualBurnLiquidityPairTokens(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    percentForLPBurn(overrides?: CallOverrides): Promise<BigNumber>;

    removeLimits(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetLimitsBackIntoEffect(overrides?: CallOverrides): Promise<boolean>;

    sellDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutoLPBurnSettings(
      _frequencyInSeconds: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _Enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutoLpReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarlySellTax(
      onoff: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepEth(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensForDev(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateBuyFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDevWallet(
      newWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketingWallet(
      newMarketingWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxTxnAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSellFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _earlySellLiquidityFee: PromiseOrValue<BigNumberish>,
      _earlySellMarketingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "AutoNukeLP()"(): AutoNukeLPEventFilter;
    AutoNukeLP(): AutoNukeLPEventFilter;

    "BoughtEarly(address)"(
      sniper?: PromiseOrValue<string> | null
    ): BoughtEarlyEventFilter;
    BoughtEarly(sniper?: PromiseOrValue<string> | null): BoughtEarlyEventFilter;

    "ExcludeFromFees(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;
    ExcludeFromFees(
      account?: PromiseOrValue<string> | null,
      isExcluded?: null
    ): ExcludeFromFeesEventFilter;

    "ManualNukeLP()"(): ManualNukeLPEventFilter;
    ManualNukeLP(): ManualNukeLPEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<boolean> | null
    ): SetAutomatedMarketMakerPairEventFilter;
    SetAutomatedMarketMakerPair(
      pair?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<boolean> | null
    ): SetAutomatedMarketMakerPairEventFilter;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): SwapAndLiquifyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "UpdateUniswapV2Router(address,address)"(
      newAddress?: PromiseOrValue<string> | null,
      oldAddress?: PromiseOrValue<string> | null
    ): UpdateUniswapV2RouterEventFilter;
    UpdateUniswapV2Router(
      newAddress?: PromiseOrValue<string> | null,
      oldAddress?: PromiseOrValue<string> | null
    ): UpdateUniswapV2RouterEventFilter;

    "devWalletUpdated(address,address)"(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): devWalletUpdatedEventFilter;
    devWalletUpdated(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): devWalletUpdatedEventFilter;

    "marketingWalletUpdated(address,address)"(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): marketingWalletUpdatedEventFilter;
    marketingWalletUpdated(
      newWallet?: PromiseOrValue<string> | null,
      oldWallet?: PromiseOrValue<string> | null
    ): marketingWalletUpdatedEventFilter;
  };

  estimateGas: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToBlackList(
      account: PromiseOrValue<string>,
      onOrOff: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    autoLpReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistAccount(
      account: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devWallet(overrides?: CallOverrides): Promise<BigNumber>;

    disableTransferDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    earlySellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    earlySellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    enableEarlySellTax(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastLpBurnTime(overrides?: CallOverrides): Promise<BigNumber>;

    lastManualLpBurnTime(overrides?: CallOverrides): Promise<BigNumber>;

    limitsInEffect(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lpBurnFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    manualBurnFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    manualBurnLiquidityPairTokens(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percentForLPBurn(overrides?: CallOverrides): Promise<BigNumber>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetLimitsBackIntoEffect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    setAutoLPBurnSettings(
      _frequencyInSeconds: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _Enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutoLpReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEarlySellTax(
      onoff: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweepEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForDev(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateBuyFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDevWallet(
      newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMarketingWallet(
      newMarketingWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaxTxnAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSellFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _earlySellLiquidityFee: PromiseOrValue<BigNumberish>,
      _earlySellMarketingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSwapEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isExcludedMaxTransactionAmount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToBlackList(
      account: PromiseOrValue<string>,
      onOrOff: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    autoLpReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAccount(
      account: PromiseOrValue<string>,
      isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyDevFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableTransferDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    earlySellLiquidityFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earlySellMarketingFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableEarlySellTax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: PromiseOrValue<string>,
      excluded: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromMaxTransaction(
      updAds: PromiseOrValue<string>,
      isEx: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastLpBurnTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastManualLpBurnTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitsInEffect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpBurnEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpBurnFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualBurnFrequency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualBurnLiquidityPairTokens(
      percent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransactionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentForLPBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetLimitsBackIntoEffect(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellDevFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutoLPBurnSettings(
      _frequencyInSeconds: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _Enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutoLpReceiver(
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEarlySellTax(
      onoff: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweep(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweepEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForDev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForMarketing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferDelayEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBuyFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDevWallet(
      newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketingWallet(
      newMarketingWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxTxnAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxWalletAmount(
      newNum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSellFees(
      _marketingFee: PromiseOrValue<BigNumberish>,
      _liquidityFee: PromiseOrValue<BigNumberish>,
      _devFee: PromiseOrValue<BigNumberish>,
      _earlySellLiquidityFee: PromiseOrValue<BigNumberish>,
      _earlySellMarketingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapTokensAtAmount(
      newAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

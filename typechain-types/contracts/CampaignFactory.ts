/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ICampaign {
  export type ConfigStruct = {
    token: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    presaleTokens: PromiseOrValue<BigNumberish>;
    liquidityTokens: PromiseOrValue<BigNumberish>;
    minPurchaseBnb: PromiseOrValue<BigNumberish>;
    maxPurchaseBnb: PromiseOrValue<BigNumberish>;
    softCap: PromiseOrValue<BigNumberish>;
    tokensPerBnb: PromiseOrValue<BigNumberish>;
    dex: PromiseOrValue<BigNumberish>;
    action: PromiseOrValue<BigNumberish>;
    liquidityPercent: PromiseOrValue<BigNumberish>;
    liquidityLockupPeriod: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number
  ] & {
    token: string;
    start: number;
    end: number;
    presaleTokens: BigNumber;
    liquidityTokens: BigNumber;
    minPurchaseBnb: BigNumber;
    maxPurchaseBnb: BigNumber;
    softCap: BigNumber;
    tokensPerBnb: BigNumber;
    dex: number;
    action: number;
    liquidityPercent: number;
    liquidityLockupPeriod: number;
  };
}

export interface CampaignFactoryInterface extends utils.Interface {
  functions: {
    "campaignImplementation()": FunctionFragment;
    "campaigns(uint256)": FunctionFragment;
    "createCampaign(uint256,(address,uint32,uint32,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,uint16,uint32))": FunctionFragment;
    "createCampaignWithOwner(uint256,address,(address,uint32,uint32,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,uint16,uint32))": FunctionFragment;
    "fee()": FunctionFragment;
    "getCampaignList(uint256[])": FunctionFragment;
    "initialize(address,address,uint16)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routers(uint8)": FunctionFragment;
    "setFee(uint16)": FunctionFragment;
    "setRouter(uint8,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCampaignImplementation(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "campaignImplementation"
      | "campaigns"
      | "createCampaign"
      | "createCampaignWithOwner"
      | "fee"
      | "getCampaignList"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "routers"
      | "setFee"
      | "setRouter"
      | "transferOwnership"
      | "updateCampaignImplementation"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaignImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [PromiseOrValue<BigNumberish>, ICampaign.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaignWithOwner",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      ICampaign.ConfigStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCampaignList",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaignImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "campaignImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaignWithOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaignImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CampaignImplementationUpdated(address)": EventFragment;
    "FeeUpdated(uint16)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewCampaign(uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RouterUpdated(uint8,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CampaignImplementationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCampaign"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterUpdated"): EventFragment;
}

export interface CampaignImplementationUpdatedEventObject {
  newImplementation: string;
}
export type CampaignImplementationUpdatedEvent = TypedEvent<
  [string],
  CampaignImplementationUpdatedEventObject
>;

export type CampaignImplementationUpdatedEventFilter =
  TypedEventFilter<CampaignImplementationUpdatedEvent>;

export interface FeeUpdatedEventObject {
  new_fee: number;
}
export type FeeUpdatedEvent = TypedEvent<[number], FeeUpdatedEventObject>;

export type FeeUpdatedEventFilter = TypedEventFilter<FeeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewCampaignEventObject {
  id: BigNumber;
  creator: string;
  campaign: string;
}
export type NewCampaignEvent = TypedEvent<
  [BigNumber, string, string],
  NewCampaignEventObject
>;

export type NewCampaignEventFilter = TypedEventFilter<NewCampaignEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RouterUpdatedEventObject {
  dex: number;
  new_router: string;
}
export type RouterUpdatedEvent = TypedEvent<
  [number, string],
  RouterUpdatedEventObject
>;

export type RouterUpdatedEventFilter = TypedEventFilter<RouterUpdatedEvent>;

export interface CampaignFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CampaignFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    campaignImplementation(overrides?: CallOverrides): Promise<[string]>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createCampaign(
      id: PromiseOrValue<BigNumberish>,
      config: ICampaign.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createCampaignWithOwner(
      id: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      config: ICampaign.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    getCampaignList(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _campaigns: string[]; _raised: BigNumber[] }
    >;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    routers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setFee(
      new_fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      dex: PromiseOrValue<BigNumberish>,
      new_router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCampaignImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  campaignImplementation(overrides?: CallOverrides): Promise<string>;

  campaigns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  createCampaign(
    id: PromiseOrValue<BigNumberish>,
    config: ICampaign.ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createCampaignWithOwner(
    id: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    config: ICampaign.ConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<number>;

  getCampaignList(
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { _campaigns: string[]; _raised: BigNumber[] }
  >;

  initialize(
    _owner: PromiseOrValue<string>,
    _campaignImplementation: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  routers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setFee(
    new_fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    dex: PromiseOrValue<BigNumberish>,
    new_router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCampaignImplementation(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    campaignImplementation(overrides?: CallOverrides): Promise<string>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createCampaign(
      id: PromiseOrValue<BigNumberish>,
      config: ICampaign.ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createCampaignWithOwner(
      id: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      config: ICampaign.ConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<number>;

    getCampaignList(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { _campaigns: string[]; _raised: BigNumber[] }
    >;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setFee(
      new_fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(
      dex: PromiseOrValue<BigNumberish>,
      new_router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCampaignImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CampaignImplementationUpdated(address)"(
      newImplementation?: null
    ): CampaignImplementationUpdatedEventFilter;
    CampaignImplementationUpdated(
      newImplementation?: null
    ): CampaignImplementationUpdatedEventFilter;

    "FeeUpdated(uint16)"(new_fee?: null): FeeUpdatedEventFilter;
    FeeUpdated(new_fee?: null): FeeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewCampaign(uint256,address,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      campaign?: PromiseOrValue<string> | null
    ): NewCampaignEventFilter;
    NewCampaign(
      id?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      campaign?: PromiseOrValue<string> | null
    ): NewCampaignEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RouterUpdated(uint8,address)"(
      dex?: null,
      new_router?: null
    ): RouterUpdatedEventFilter;
    RouterUpdated(dex?: null, new_router?: null): RouterUpdatedEventFilter;
  };

  estimateGas: {
    campaignImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      id: PromiseOrValue<BigNumberish>,
      config: ICampaign.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createCampaignWithOwner(
      id: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      config: ICampaign.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignList(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    routers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(
      new_fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouter(
      dex: PromiseOrValue<BigNumberish>,
      new_router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCampaignImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    campaignImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      id: PromiseOrValue<BigNumberish>,
      config: ICampaign.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createCampaignWithOwner(
      id: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      config: ICampaign.ConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCampaignList(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignImplementation: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    routers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      new_fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      dex: PromiseOrValue<BigNumberish>,
      new_router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCampaignImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

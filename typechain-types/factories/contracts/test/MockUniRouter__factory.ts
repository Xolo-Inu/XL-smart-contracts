/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockUniRouter,
  MockUniRouterInterface,
} from "../../../contracts/test/MockUniRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028d806100206000396000f3fe60806040526004361061005a5760003560e01c8063c45a015511610043578063c45a0155146100c8578063e6a43905146100fc578063f305d7191461011e57600080fd5b806370a082311461005f578063a9059cbb14610095575b600080fd5b34801561006b57600080fd5b5061008261007a366004610180565b506201e0f390565b6040519081526020015b60405180910390f35b3480156100a157600080fd5b506100b86100b03660046101a2565b600192915050565b604051901515815260200161008c565b3480156100d457600080fd5b50305b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b34801561010857600080fd5b506100d76101173660046101cc565b3092915050565b61013c61012c3660046101ff565b5092943494506103e89350915050565b6040805193845260208401929092529082015260600161008c565b803573ffffffffffffffffffffffffffffffffffffffff8116811461017b57600080fd5b919050565b60006020828403121561019257600080fd5b61019b82610157565b9392505050565b600080604083850312156101b557600080fd5b6101be83610157565b946020939093013593505050565b600080604083850312156101df57600080fd5b6101e883610157565b91506101f660208401610157565b90509250929050565b60008060008060008060c0878903121561021857600080fd5b61022187610157565b955060208701359450604087013593506060870135925061024460808801610157565b915060a08701359050929550929550929556fea2646970667358221220ee1d6d0b3529955d0f3f178f92e7f91d68deb03ff9c8f111ef4a3df70e2584cd64736f6c634300080d0033";

type MockUniRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniRouter__factory extends ContractFactory {
  constructor(...args: MockUniRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUniRouter> {
    return super.deploy(overrides || {}) as Promise<MockUniRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockUniRouter {
    return super.attach(address) as MockUniRouter;
  }
  override connect(signer: Signer): MockUniRouter__factory {
    return super.connect(signer) as MockUniRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniRouterInterface {
    return new utils.Interface(_abi) as MockUniRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUniRouter {
    return new Contract(address, _abi, signerOrProvider) as MockUniRouter;
  }
}
